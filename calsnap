#!/bin/sh

# Exit if an uninitialised variable is read
set -u
# Exit if a pipeline exits non-zero
set -e

VERSION="1.0.1"

if [ "$#" = "1" ] && [ "$1" = "--version" ]; then
    echo "calsnap version $VERSION"
    exit 0
fi

if [ "$#" = "1" ] && { [ "$1" = "-h" ] || [ "$1" = "--help" ]; }; then
    echo "usage: calsnap [-c /path/to/calsnap.conf]"
    echo
    echo "Configuration should be in /etc/calsnap.conf or /usr/local/etc/calsnap.conf,"
    echo "or given after the -c option"
    echo "See https://github.com/bannmann/calsnap for more information."
    exit 0
fi

calsnap_conf= # Make sure it's always defined
if [ "$#" = 2 ] && [ "$1" = "-c" ]; then
    calsnap_conf=$2
fi

starttime=$(date +%s)

# set these so we can define the log_functions early
verbose=0
syslog=
log_error() {
    echo "Error: $*" >&2
    if [ -n "$syslog" ]; then
        logger -t "calsnap[$$]" -p "$syslog.warn" "level=error $*"
    fi
    exit 1
}
log_message() {
    if [ "$verbose" -ge 0 ]; then
        echo "Warning: $*" >&2
        if [ -n "$syslog" ]; then
            logger -t "calsnap[$$]" -p "$syslog.warn" "level=warn $*"
        fi
    fi
}
log_verbose() {
    if [ "$verbose" -ge 1 ]; then
        echo "Info: $*" >&2
        if [ -n "$syslog" ]; then
            logger -t "calsnap[$$]" -p "$syslog.info" "level=info $*"
        fi
    fi
}
log_debug() {
    if [ "$verbose" -ge 2 ]; then
        echo "Debug: $*" >&2
        if [ -n "$syslog" ]; then
            logger -t "calsnap[$$]" -p "$syslog.debug" "level=debug $*"
        fi
    fi
}

die() {
    log_error "$* action=exiting"
    exit 1
}

# PART 1: Initialisation
if [ -n "$calsnap_conf" ]; then
    if [ -f "$calsnap_conf" ]; then
        # This file isn't expected to exist--shellcheck can ignore it
        # shellcheck source=/dev/null
        . "$calsnap_conf"
        log_debug "load-config source=$calsnap_conf"
    else
        die "load-config source=$calsnap_conf message=\"User-specified config not found\""
    fi
elif [ -f /etc/calsnap.conf ]; then
    . /etc/calsnap.conf
    log_debug "load-config source=/etc/calsnap.conf"
elif [ -f /usr/local/etc/calsnap.conf ]; then
    . /usr/local/etc/calsnap.conf
    log_debug "load-config source=/usr/local/etc/calsnap.conf"
else
    die "load-config-error message=\"No /etc/calsnap.conf, /usr/local/etc/calsnap.conf, or -c option\""
fi
# Use default values if anything is not set
verbose="${verbose=0}"
hostname="${hostname=$(hostname -s)}"
uselocaltime="${uselocaltime=0}"
backuptargets="${backuptargets=}"
prebackupscript="${prebackupscript=}"
postbackupscript="${postbackupscript=}"
tarsnap="${tarsnap:=tarsnap}"
tarsnapbackupoptions="${tarsnapbackupoptions=}"
lockfile="${lockfile=/var/run/calsnap}"
dailybackups="${dailybackups:=31}"
monthlybackups="${monthlybackups:=12}"
yearlybackups="${yearlybackups:=0}"
type calltarsnap >/dev/null 2>&1 || calltarsnap() { $tarsnap "$@"; }
LANG="${LANG=en_US.UTF-8}"
export LANG

# Parameter validation
if [ -z "$backuptargets" ]; then
    die "config-error message=\"\$backuptargets is not set in calsnap.conf.\""
fi

if [ "$uselocaltime" = 0 ]; then
    utc="-u"
elif [ "$uselocaltime" = 1 ]; then
    utc=""
else
    die "config-error message=\"invalid \$uselocaltime in calsnap.conf; valid options are 0 (for UTC) or 1 (for local time).\""
fi

[ $((dailybackups)) = "$dailybackups" ]     || die "config-error message=\"Invalid \$dailybackups; must be a number.\""
[ $((monthlybackups)) = "$monthlybackups" ] || die "config-error message=\"Invalid \$monthlybackups; must be a number.\""
[ $((yearlybackups)) = "$yearlybackups" ]   || die "config-error message=\"Invalid \$yearlybackups; must be a number.\""

# Create the lock. mkdir is atomic test/set, so use that instead of the typical test -f/touch combo
if [ -d "$lockfile" ]; then
    die "calsnap-error message=\"$lockfile exists referencing PID $(cat "$lockfile/pid" 2>/dev/null || echo "<none>"). Hint: If calsnap is not already running, rm -rf $lockfile.\""
else
    if output=$(mkdir "$lockfile" 2>&1); then
        echo $$ >"$lockfile/pid"
        log_debug "message=\"Created $lockfile with 'pid' referencing $$\""
    else
        die "calsnap-error message=\"Can't create lock $lockfile: $output\""
    fi
fi

trap 'trap - INT TERM EXIT ; echo Exiting unexpectedly. >&2 ; rm -f "$lockfile/pid"; rmdir "$lockfile" ; exit 1' INT TERM EXIT

# prettyprint [string]
prettyprint() {
    pp_str="$1"
    echo "$pp_str" | tr '\n' " "
}

# PART 2: Preparation
log_debug "Listing tarsnap archives before creating backups"
if ! archives_unsorted=$(calltarsnap --list-archives); then
    die "calsnap-tarsnap-error message=\"Couldn't get list of existing archives (Hint: is Tarsnap configured correctly?)\""
    exit 1
fi
archives=$(echo "$archives_unsorted" | sort -n)

# When is now?
# Instead of re-running date, be paranoid the day was microseconds away from ending
today=$(date $utc "+%Y-%m-%d_%H:%M:%S")
year=$( echo "$today" | cut -d_ -f1 | cut -d- -f1)
month=$(echo "$today" | cut -d_ -f1 | cut -d- -f2)
# day=$(echo "$today" | cut -d_ -f1 | cut -d- -f3) # unused

# Run the pre-backup script
if [ -n "$prebackupscript" ]; then
    if [ -x "$prebackupscript" ]; then
        log_verbose "run-prebackupscript script=$prebackupscript..."
        $prebackupscript
    else
        die "calsnap-error message=\"prebackupscript $prebackupscript is not executable!\""
    fi
fi

# PART 3: Backup

backuprc=0 # Notice any failed backups
backuplist="" # Maintain list of successfully created archives

dailyarchive="$hostname-daily-$today"
monthlyarchive="$hostname-monthly-$today"
yearlyarchive="$hostname-yearly-$today"

log_verbose "backup-start  type=daily name=$dailyarchive"
archive_starttime=$(date +%s)

# Uncontrolled expansion is bad, but we have little choice. See https://github.com/koalaman/shellcheck/wiki/Sc2086
# shellcheck disable=SC2086
if output="$(calltarsnap -c -f "$dailyarchive" -C / $tarsnapbackupoptions $backuptargets 2>&1)"; then
    backuplist="$backuplist $dailyarchive"
else
    log_output=$(prettyprint "$output")
    log_message "backup-error type=daily output=\"$log_output\""
    backuprc=1
fi
archive_endtime=$(date +%s)
log_verbose "backup-finish type=daily duration=$((archive_endtime - archive_starttime))s"

# Determine whether other backup levels need to be created too
# If so, copy them from $dailyarchive
if ! echo "$archives" | grep -E -q "^$hostname-yearly-$year-[0-9:_-]{14}$"; then
    # No yearly backup
    log_debug "message=\"Copying daily archive to yearly archive\""
    archive_starttime=$(date +%s)
    # shellcheck disable=SC2086
    if output="$(calltarsnap -c -f "$yearlyarchive" $tarsnapbackupoptions "@@$dailyarchive" 2>&1)"; then
        backuplist="$backuplist $yearlyarchive"
    else
        log_output=$(prettyprint "$output")
        log_message "copy-error  type=yearly output=\"$log_output\""
        backuprc=1
    fi
    archive_endtime=$(date +%s)
    log_verbose "copy-finish type=yearly name=$yearlyarchive duration=$((archive_endtime - archive_starttime))s"
fi

if ! echo "$archives" | grep -E -q "^$hostname-monthly-$year-$month-[0-9:_-]{11}$"; then
    # No monthly backup
    log_debug "message=\"Copying daily archive to monthly archive\""
    archive_starttime=$(date +%s)
    # shellcheck disable=SC2086
    if output="$(calltarsnap -c -f "$monthlyarchive" $tarsnapbackupoptions "@@$dailyarchive" 2>&1)"; then
        backuplist="$backuplist $monthlyarchive"
    else
        log_output=$(prettyprint "$output")
        log_message "copy-error  type=monthly output=\"$log_output\""
        backuprc=1
    fi
    archive_endtime=$(date +%s)
    log_verbose "copy-finish type=monthly name=$monthlyarchive duration=$((archive_endtime - archive_starttime))s"
fi

# Update the archive listing
log_debug "Listing tarsnap archives before deleting old backups"
archives=$(calltarsnap --list-archives | sort -n)

# PART 4: Trim old backups.
if [ "$backuprc" != "0" ]; then
    die "calsnap-tarsnap-error One of the backups failed -- not deleting old backups"
fi

# prune_backups [backuplevel] [max]
# prune_backups monthly 12
prune_backups() {
    pb_backuplevel=$1
    pb_max=$2

    if [ "$pb_max" -gt 0 ]; then
        backupslist=$(echo "$archives" | grep -E "$hostname-$pb_backuplevel-[0-9:_-]{19}$" | sort -rn)
        numberofbackups=$(printf '%s' "$backupslist" | awk 'END{print NR}')
        if [ "$numberofbackups" -gt "$pb_max" ]; then
            log_debug "message=\"More than $pb_max $pb_backuplevel backups, deleting the oldest\""
            echo "$backupslist" | tail -n +"$((pb_max + 1))" | while read -r archivetodel; do
                log_verbose "message=\"Deleting backup $archivetodel\""
                if ! output="$(calltarsnap -d -f "$archivetodel" 2>&1)"; then
                    log_output=$(prettyprint "$output")
                    log_message "delete-error type=$pb_backuplevel output=\"$log_output\""
                fi
            done
        else
            log_debug "message=\"Found $numberofbackups $pb_backuplevel backups; not deleting any\""
        fi
    else
        log_debug "message=\"Keeping all $pb_backuplevel backups indefinitely; not deleting any\""
    fi
}

log_debug "message=\"Checking for old backups to delete\""
prune_backups yearly  $yearlybackups
prune_backups monthly $monthlybackups
prune_backups daily   $dailybackups

# Run the post-backup script
if [ -n "$postbackupscript" ]; then
    if [ -x "$postbackupscript" ]; then
        log_verbose "run-postbackupscript script=$postbackupscript..."
        # shellcheck disable=SC2086
        $postbackupscript $backuplist
    else
        die "calsnap-error message=\"postbackupscript $postbackupscript is not executable!\""
    fi
fi

trap - INT TERM EXIT
rm -f "$lockfile/pid"
rmdir "$lockfile"

endtime=$(date +%s)
log_verbose "calsnap-finished duration=$((endtime - starttime))s action=exiting"
exit 0
